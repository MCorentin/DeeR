if(!require("ggplot2")) install.package("ggplot2")
if(!require("treemap", quietly = T)) install.packages("treemap")
sessionInfo()
if(!require("httr")) install.packages("httr")
if(!require("ggplot2")) install.package("ggplot2")
if(!require("treemap", quietly = T)) install.packages("treemap")
sessionInfo()
document()
setwd("../")
document()
getwd()
setwd("GitHub/DeeR/")
document()
setwd("../")
install()
setwd("DeeR/")
install()
sessionInfo
sessionInfo()
install.packages("devtools")
library("devtools")
install_github(repo = "MCorentin/DeeR", dependencies = TRUE)
library("DeeR")
#playlist_id <- "1183004551"
playlist_id <- "13323984883"
# request_playlist_info("abc")
playlist_info <- request_playlist_info(playlist_id)
View(playlist_info)
user <- playlist_info$creator$name
title <- playlist_info$title
# request_tracks("abc")
tracks <- request_tracks(playlist_id)
plot_top_artists(tracks)
tracks
tracks$artist
View(tracks)
artists <- data.frame(do.call("rbind", tracks$artist))
artists
artists$name <- as.character(artists$name)
artists$name
if(!is.numeric(n)) stop("Argument 'n' is not numeric")
top_artists <- data.frame(table(artists$name)[order(table(artists$name), decreasing = T)[1:n]])
n <- 10
top_artists <- data.frame(table(artists$name)[order(table(artists$name), decreasing = T)[1:n]])
top_artists
length(unique(artists$name))
#' Will plot the top n artists (in number of songs in the playlist).
#'
#' @param tracks: a dataframe with an "artist" column, can be obtained with [DeeR::request_tracks]
#' @param n: the number of artists to plot, default: 10
#' @return A ggplot barplot with the top artists by number of songs
#' @export
plot_top_artists <- function(tracks, n = 10) {
artists <- data.frame(do.call("rbind", tracks$artist))
artists$name <- as.character(artists$name)
if(!is.numeric(n)) stop("Argument 'n' is not numeric")
if(n > length(unique(artists$name))) n <- length(unique(artists$name))
top_artists <- data.frame(table(artists$name)[order(table(artists$name), decreasing = T)[1:n]])
gg_top_artists <- ggplot(data = top_artists, aes(x = Var1, y = Freq)) +
geom_bar(col = "black", fill = "deepskyblue4", alpha = 0.7, stat = "identity") +
theme_bw() +
ggtitle(paste0(user, "'s ", playlist_info$title, " - Top artists (", length(unique(artists$name)), " artists)")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
return(gg_top_artists)
}
plot_top_artists(tracks)
png("top_artists.png")
plot_top_artists(tracks)
dev.off()
png("artists_plot.png", unit = "cm", height = 12, width = 14, res = 300)
plot_top_artists(tracks)
dev.off()
png("top_artists_plot.png", unit = "cm", height = 12, width = 14, res = 300)
plot_top_artists(tracks)
dev.off()
#' Will plot the top n artists (in number of songs in the playlist).
#'
#' @param tracks: a dataframe with an "artist" column, can be obtained with [DeeR::request_tracks]
#' @param n: the number of artists to plot, default: 10
#' @return A ggplot barplot with the top artists by number of songs
#' @export
plot_top_artists <- function(tracks, n = 10) {
artists <- data.frame(do.call("rbind", tracks$artist))
artists$name <- as.character(artists$name)
if(!is.numeric(n)) stop("Argument 'n' is not numeric")
if(n > length(unique(artists$name))) n <- length(unique(artists$name))
top_artists <- data.frame(table(artists$name)[order(table(artists$name), decreasing = T)[1:n]])
gg_top_artists <- ggplot(data = top_artists, aes(x = Var1, y = Freq)) +
geom_bar(col = "black", fill = "deepskyblue4", alpha = 0.7, stat = "identity") +
theme_bw() + xlab("") + ylab("Number of songs") +
ggtitle(paste0(user, "'s ", playlist_info$title, " - Top artists (", length(unique(artists$name)), " artists)")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
return(gg_top_artists)
}
plot_top_artists(tracks)
png("top_artists_plot.png", unit = "cm", height = 12, width = 14, res = 300)
plot_top_artists(tracks)
dev.off()
tracks
for(album in unique(tracks$album)){
print(album)
]
for(album in unique(tracks$album)){
print(album)
}
album_lists <- list()
for(album in unique(tracks$album)){
album_request <- httr::GET(paste0("https://api.deezer.com/album/", album$id))
album_content <- httr::content(album_request)
album_lists <- append(album_lists, album_content$data)
# Test with sleep to respect the API quotas (50 requests / second)
# Todo: find a better way to implement this:
Sys.sleep(0.2)
}
View(album_lists)
tracks$album
album
album_content
album_content
View(album_content)
for(album in unique(tracks$album)){
album_request <- httr::GET(paste0("https://api.deezer.com/album/", album$id))
album_content <- httr::content(album_request)
album_lists <- append(album_lists, album_content)
# Test with sleep to respect the API quotas (50 requests / second)
# Todo: find a better way to implement this:
Sys.sleep(0.2)
}
album_lists <- list()
for(album in unique(tracks$album)){
album_request <- httr::GET(paste0("https://api.deezer.com/album/", album$id))
album_content <- httr::content(album_request)
album_lists <- append(album_lists, album_content)
# Test with sleep to respect the API quotas (50 requests / second)
# Todo: find a better way to implement this:
Sys.sleep(0.2)
}
View(album_lists)
data.frame(do.call("rbind", album_lists))
test <- data.frame(do.call("rbind", album_lists))
View(test)
album_content$genres*
album_content$genres
do.call("c", album_content$genres)
do.call("rbind", album_content$genres)
album_content$genres$data
album_lists <- list()
for(album in unique(tracks$album)){
album_request <- httr::GET(paste0("https://api.deezer.com/album/", album$id))
album_content <- httr::content(album_request)
# Extract the list of genres from the album:
genres <- list()
if(length(album_content$genres$data) > 0){
for(i in c(1:length(album_content$genres$data))){
genres <- append(genres, album_content$genres$data[[i]]$name)
}
}
album_df <- data.frame(genre = genres,
release_date =  album_content$release_date,
explicit = album_content$explicit_lyrics)
album_lists <- append(album_lists, album_content)
# Test with sleep to respect the API quotas (50 requests / second)
# Todo: find a better way to implement this:
Sys.sleep(0.2)
}
View(album_lists)
album_lists <- list()
for(album in unique(tracks$album)){
album_request <- httr::GET(paste0("https://api.deezer.com/album/", album$id))
album_content <- httr::content(album_request)
# Extract the list of genres from the album:
genres <- list()
if(length(album_content$genres$data) > 0){
for(i in c(1:length(album_content$genres$data))){
genres <- append(genres, album_content$genres$data[[i]]$name)
}
}
album_df <- data.frame(genre = genres,
release_date =  album_content$release_date,
explicit = album_content$explicit_lyrics)
album_lists <- append(album_lists, album_df)
# Test with sleep to respect the API quotas (50 requests / second)
# Todo: find a better way to implement this:
Sys.sleep(0.2)
}
album_content$release_date
album_content$explicit_lyrics
genres
if(length(album_content$genres$data) > 0){
for(i in c(1:length(album_content$genres$data))){
genres <- append(genres, album_content$genres$data[[i]]$name)
}
}
genres
album_content$genres$data
# Extract the list of genres from the album:
genres <- list()
if(length(album_content$genres$data) > 0){
for(i in c(1:length(album_content$genres$data))){
genres <- append(genres, album_content$genres$data[[i]]$name)
}
} else {
genres <- append(genres, "no genre")
}
genres
album_df <- data.frame(genre = genres,
release_date =  album_content$release_date,
explicit = album_content$explicit_lyrics)
album_df
album_lists <- list()
for(album in unique(tracks$album)){
album_request <- httr::GET(paste0("https://api.deezer.com/album/", album$id))
album_content <- httr::content(album_request)
# Extract the list of genres from the album:
genres <- list()
if(length(album_content$genres$data) > 0){
for(i in c(1:length(album_content$genres$data))){
genres <- append(genres, album_content$genres$data[[i]]$name)
}
} else {
genres <- append(genres, "no genre")
}
album_df <- data.frame(genre = genres,
release_date =  album_content$release_date,
explicit = album_content$explicit_lyrics)
album_lists <- append(album_lists, album_df)
# Test with sleep to respect the API quotas (50 requests / second)
# Todo: find a better way to implement this:
Sys.sleep(0.2)
}
View(album_df)
View(album_lists)
test <- data.frame(do.call("rbind", album_lists))
View(test)
View(album_lists)
View(genres)
album_lists <- list()
for(album in unique(tracks$album)){
album_request <- httr::GET(paste0("https://api.deezer.com/album/", album$id))
album_content <- httr::content(album_request)
# Extract the list of genres from the album:
genres <- c()
if(length(album_content$genres$data) > 0){
for(i in c(1:length(album_content$genres$data))){
genres <- c(genres, album_content$genres$data[[i]]$name)
}
} else {
genres <- "no genre"
}
album_df <- data.frame(genre = genres,
release_date =  album_content$release_date,
explicit = album_content$explicit_lyrics)
album_lists <- append(album_lists, album_df)
# Test with sleep to respect the API quotas (50 requests / second)
# Todo: find a better way to implement this:
Sys.sleep(0.2)
}
View(album_lists)
test <- data.frame(do.call("rbind", album_lists))
View(test)
genres
album_lists <- list()
for(album in unique(tracks$album)){
album_request <- httr::GET(paste0("https://api.deezer.com/album/", album$id))
album_content <- httr::content(album_request)
# Extract the list of genres from the album:
genres <- c()
if(length(album_content$genres$data) > 0){
for(i in c(1:length(album_content$genres$data))){
genres <- c(genres, album_content$genres$data[[i]]$name)
}
} else {
genres <- "no genre"
}
album_df <- data.frame(genre = genres,
release_date =  album_content$release_date,
explicit = album_content$explicit_lyrics)
album_lists <- append(album_lists, list(album_df))
# Test with sleep to respect the API quotas (50 requests / second)
# Todo: find a better way to implement this:
Sys.sleep(0.2)
}
View(album_lists)
data.frame(do.call("rbind", album_lists))
albums
test
test <- data.frame(do.call("rbind", album_lists))
test
treemap_data <- data.frame(table(test$genre))
treemap_data
#' Will plot the top n artists (in number of songs in the playlist).
#'
#' @param tracks: a dataframe with an "artist" column, can be obtained with [DeeR::request_tracks]
#' @param n: the number of artists to plot, default: 10
#' @return A ggplot barplot with the top artists by number of songs
#' @export
plot_top_artists <- function(tracks, n = 10) {
artists <- data.frame(do.call("rbind", tracks$artist))
artists$name <- as.character(artists$name)
if(!is.numeric(n)) stop("Argument 'n' is not numeric")
if(n > length(unique(artists$name))) n <- length(unique(artists$name))
top_artists <- data.frame(table(artists$name)[order(table(artists$name), decreasing = T)[1:n]])
gg_top_artists <- ggplot(data = top_artists, aes(x = Var1, y = Freq)) +
geom_bar(col = "black", fill = "deepskyblue4", alpha = 0.7, stat = "identity") +
theme_bw() + xlab("") + ylab("Number of songs") +
ggtitle(paste0(user, "'s ", playlist_info$title, " - Top artists (", length(unique(artists$name)), " artists)")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
return(gg_top_artists)
}
#' Will plot the genres present in the playlist as a treemap.
#'
#' @param albums: a data.frame obtained with [DeeR::request_albums]
#' @return A treemap of the genres present in the playlist
#' @export
plot_genres_treemap <- function(albums) {
treemap_data <- data.frame(table(test$genre))
t <- treemap::treemap(treemap_data,
index = c("genres"),
vSize = "Freq", type = "index",
fontsize.labels = c(30, 12),
fontcolor.labels = c("white", "white"),
fontface.labels = c(2, 1), # 2 = bold, 1 = normal
bg.labels = c("transparent"),
align.labels = list(c("center", "center"),
c("center", "center")),
inflate.labels = FALSE,
title = "Genres - Treemap"))
#' Will plot the top n artists (in number of songs in the playlist).
#'
#' @param tracks: a dataframe with an "artist" column, can be obtained with [DeeR::request_tracks]
#' @param n: the number of artists to plot, default: 10
#' @return A ggplot barplot with the top artists by number of songs
#' @export
plot_top_artists <- function(tracks, n = 10) {
artists <- data.frame(do.call("rbind", tracks$artist))
artists$name <- as.character(artists$name)
if(!is.numeric(n)) stop("Argument 'n' is not numeric")
if(n > length(unique(artists$name))) n <- length(unique(artists$name))
top_artists <- data.frame(table(artists$name)[order(table(artists$name), decreasing = T)[1:n]])
gg_top_artists <- ggplot(data = top_artists, aes(x = Var1, y = Freq)) +
geom_bar(col = "black", fill = "deepskyblue4", alpha = 0.7, stat = "identity") +
theme_bw() + xlab("") + ylab("Number of songs") +
ggtitle(paste0(user, "'s ", playlist_info$title, " - Top artists (", length(unique(artists$name)), " artists)")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
return(gg_top_artists)
}
#' Will plot the genres present in the playlist as a treemap.
#'
#' @param albums: a data.frame obtained with [DeeR::request_albums]
#' @return A treemap of the genres present in the playlist
#' @export
plot_genres_treemap <- function(albums) {
treemap_data <- data.frame(table(test$genre))
t <- treemap::treemap(treemap_data,
index = c("genres"),
vSize = "Freq", type = "index",
fontsize.labels = c(30, 12),
fontcolor.labels = c("white", "white"),
fontface.labels = c(2, 1), # 2 = bold, 1 = normal
bg.labels = c("transparent"),
align.labels = list(c("center", "center"),
c("center", "center")),
inflate.labels = FALSE,
title = "Genres - Treemap")
return(t)
}
#' Get playlist information:
#' Makes a request to Deezer's API to get the tracks as a parsed R object.
#'
#' @param playlist_id: a string representing the playlist ID
#' @return A parsed R object from [httr::content()]
#' @export
#' @examples get_playlist_info("13323984883")
request_playlist_info <- function(playlist_id = "13323984883") {
# Get some metadata directly from the "playlist" object:
playlist_request <- httr::GET(paste0("https://api.deezer.com/playlist/", playlist_id))
playlist_info <- httr::content(x = playlist_request, as = "parsed")
# If length 1 it means that playlist_info only contains "$error"
if(length(playlist_info) == 1) {
stop(paste0("Error while retrieving the playlist, error code: ", playlist_info$error$code))
} else {
return(playlist_info)
}
}
#' Get playlist tracks:
#' Makes a request to Deezer's API to get the tracks as a parsed R object.
#'
#' @param playlist_id: a string representing the playlist ID
#' @return A data.frame with the tracks information
#' @export
#' @examples get_tracks_list("13323984883")
request_tracks <- function(playlist_id = "13323984883") {
tracks_request <- httr::GET(paste0("https://api.deezer.com/playlist/", playlist_id, "/tracks/"))
tracks_content <- httr::content(x = tracks_request, as = "parsed")
# If length 1 it means that playlist_info only contains "$error"
if(length(tracks_content) == 1) {
stop(paste0("Error while retrieving the tracks, error code: ", tracks_content$error$code))
} else {
tracks_list <- tracks_content$data
while(is.null(tracks_content$`next`) == FALSE){
tracks_request <- httr::GET(tracks_content$`next`)
tracks_content <- httr::content(x = tracks_request, as = "parsed")
tracks_list <- append(tracks_list, tracks_content$data)
}
# Normalising track lists: "title_version" is absent for some songs...
for(i in c(1:length(tracks_list))) {
tracks_list[[i]]$title_version <- NULL
}
return(data.frame(do.call("rbind", tracks_list)))
}
}
#' Get the albums information:
#' Makes requests to Deezer's API to get the albums as a data.frame
#' Needed to get the genres, year of release and explicit lyrics information.
#'
#' @param tracks: a dataframe with an "artist" column, can be obtained with [DeeR::request_tracks]
#' @return A data.frame with the albums information
#' @export
request_albums <- function(tracks) {
album_lists <- list()
for(album in unique(tracks$album)){
album_request <- httr::GET(paste0("https://api.deezer.com/album/", album$id))
album_content <- httr::content(album_request)
# Extract the list of genres from the album:
genres <- c()
if(length(album_content$genres$data) > 0){
for(i in c(1:length(album_content$genres$data))){
genres <- c(genres, album_content$genres$data[[i]]$name)
}
} else {
genres <- "no genre"
}
album_df <- data.frame(genre = genres,
release_date =  album_content$release_date,
explicit = album_content$explicit_lyrics)
album_lists <- append(album_lists, list(album_df))
# Test with sleep to respect the API quotas (50 requests / second)
# Todo: find a better way to implement this:
Sys.sleep(0.2)
}
return(data.frame(do.call("rbind", album_lists)))
}
# request_playlist_info("abc")
playlist_info <- request_playlist_info(playlist_id)
user <- playlist_info$creator$name
title <- playlist_info$title
source("~/GitHub/DeeR/R/plot_functions.R")
source("~/GitHub/DeeR/R/deezer_requests.R")
#playlist_id <- "1183004551"
playlist_id <- "13323984883"
# request_playlist_info("abc")
playlist_info <- request_playlist_info(playlist_id)
user <- playlist_info$creator$name
title <- playlist_info$title
# request_tracks("abc")
tracks <- request_tracks(playlist_id)
png("top_artists_plot.png", unit = "cm", height = 12, width = 14, res = 300)
plot_top_artists(tracks)
dev.off()
png("genres_treemap.png", unit = "cm", height = 12, width = 14, res = 300)
plot_genres_treemap
dev.off()
plot_genres_treemap()
#' Will plot the genres present in the playlist as a treemap.
#'
#' @param albums: a data.frame obtained with [DeeR::request_albums]
#' @return A treemap of the genres present in the playlist
#' @export
plot_genres_treemap <- function(albums) {
treemap_data <- data.frame(table(albums$genre))
t <- treemap::treemap(treemap_data,
index = c("genres"),
vSize = "Freq", type = "index",
fontsize.labels = c(30, 12),
fontcolor.labels = c("white", "white"),
fontface.labels = c(2, 1), # 2 = bold, 1 = normal
bg.labels = c("transparent"),
align.labels = list(c("center", "center"),
c("center", "center")),
inflate.labels = FALSE,
title = "Genres - Treemap")
return(t)
}
plot_genres_treemap()
albums <- request_albums(tracks)
plot_genres_treemap(albums)
albums
data.frame(table(albums$genre))
#' Will plot the genres present in the playlist as a treemap.
#'
#' @param albums: a data.frame obtained with [DeeR::request_albums]
#' @return A treemap of the genres present in the playlist
#' @export
plot_genres_treemap <- function(albums) {
treemap_data <- data.frame(table(albums$genre))
t <- treemap::treemap(treemap_data,
index = c("Var1"),
vSize = "Freq", type = "index",
fontsize.labels = c(30, 12),
fontcolor.labels = c("white", "white"),
fontface.labels = c(2, 1), # 2 = bold, 1 = normal
bg.labels = c("transparent"),
align.labels = list(c("center", "center"),
c("center", "center")),
inflate.labels = FALSE,
title = "Genres - Treemap")
return(t)
}
plot_genres_treemap(albums)
png("genres_treemap.png", unit = "cm", height = 12, width = 14, res = 300)
plot_genres_treemap(albums)
dev.off()
